name: Build desktop executables

on:
  push:
    branches: [ main ]
    # allow pushing tags like v1.0.0 to trigger builds and release publishing
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-macos:
    name: Build macOS executable
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
      - name: Run PyInstaller (macOS)
        run: |
          pyinstaller Main.py --onefile --noconfirm --windowed \
            --add-data "image:image" \
            --add-data "data/monthlyElement.xml:." \
            --add-data "data/GoogleSansCode-VariableFont_wght.ttf:."
      - name: Prepare release files (macOS)
        run: |
          mkdir -p release
          # Keep the one-file executable separately and create an assets zip
          if [ -f dist/Main ]; then
            mv dist/Main release/HK_Rainfall_Visualiser_mac_executable
          fi
          # include only runtime assets
          zip -r release/HK_Rainfall_Visualiser_mac_assets.zip image data data/GoogleSansCode-VariableFont_wght.ttf
          ls -la release
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: HK_Rainfall_Visualiser_mac
          path: release

  build-windows:
    name: Build Windows executable
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
      - name: Run PyInstaller (Windows)
        shell: cmd
        run: |
          pyinstaller Main.py --onefile --noconfirm --windowed ^
            --add-data "image;image" ^
            --add-data "data/monthlyElement.xml;." ^
            --add-data "data/GoogleSansCode-VariableFont_wght.ttf;."
      - name: Prepare release files (Windows)
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path release -Force | Out-Null
          if (Test-Path dist\Main.exe) { Copy-Item -Path dist\Main.exe -Destination release\HK_Rainfall_Visualiser_win_executable.exe -Force }
          Compress-Archive -Path image, data, data\\GoogleSansCode-VariableFont_wght.ttf -DestinationPath release\HK_Rainfall_Visualiser_win_assets.zip -Force
          Get-ChildItem -Path release | Format-List
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: HK_Rainfall_Visualiser_win
          path: release

  publish-release:
    name: Publish release with artifacts
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows]
    if: always()
    steps:
      - name: Create GitHub release and upload artifacts
        uses: ncipollo/release-action@v1
        with:
          # Use the pushed tag if this workflow was triggered by a tag push
          # (for example v1.0.0). When triggered by a branch push you can still
          # rely on the autogenerated build tag behavior if desired.
          tag: ${{ github.ref_name }}
          artifacts: HK_Rainfall_Visualiser_mac,HK_Rainfall_Visualiser_win
          name: "HK Rainfall Visualiser"
          token: ${{ secrets.GITHUB_TOKEN }}
